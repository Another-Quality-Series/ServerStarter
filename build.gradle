plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.4.32"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.32'
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "com.github.ben-manes.versions" version "0.38.0"
}

group = 'atm.bloodworkxgaming'
version = '2.1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()

    maven {
        name = 'DVS1'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.13.2'

    compile group: 'org.yaml', name: 'snakeyaml', version: '1.28'

    implementation "com.charleskorn.kaml:kaml:0.34.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1"


    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
    compile 'com.squareup.okhttp3:okhttp:4.9.1'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // https://mvnrepository.com/artifact/org.fusesource.jansi/jansi
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '2.3.2'
}

shadowJar {
    classifier = ""
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'atm.bloodworkxgaming.serverstarter.ServerStarterKt'
        )
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.build.dependsOn shadowJar


task copyJar(type: Copy) {
    dependsOn build


    from file("$buildDir/libs/serverstarter-${version}.jar")
    into file("$buildDir/dist/serverstarter-$version/")
}

task packageDist(type: Copy) {
    group = "build"
    dependsOn copyJar

    from file("src/main/resources/startserver.bat")
    from file("src/main/resources/startserver.sh")
    from file("server-setup-config.yaml")


    into file("$buildDir/dist/serverstarter-$version/")

    filter { it.replaceAll("@@serverstarter-libVersion@@", version as String) }
}

task zipDist (type: Zip) {
    dependsOn packageDist
    group = "build"

    from file("$buildDir/dist/serverstarter-$version/")
    include '*'
    include '*/**'
    archiveName = "serverstarter-${version}.zip"
    destinationDir = file("$buildDir/release/")
}


githubRelease {
    token = getGithubKey()
    owner = "BloodWorkXGaming"
    repo = "ServerStarter"

    releaseAssets file("$buildDir/release/serverstarter-${version}.zip")
}

tasks.githubRelease.dependsOn zipDist

static String getGithubKey(){
    if (new File('secrets.properties').exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(new File('secrets.properties')))
        return props['GITHUB_TOKEN']
    }

    return ""
}

task depsize {
    group = "help"
    doLast {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"

        configurations
                .default
                .sort { -it.length() }
                .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println(out)
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
